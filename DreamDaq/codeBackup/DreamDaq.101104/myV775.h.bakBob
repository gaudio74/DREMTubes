//$Id: myV775.h,v 1.4 2008/07/18 11:11:51 dreamdaq Exp $
/*****************************************

  myV775.h
  ---------

  Definition of the CAEN V775 TDC.
  This class is a class derived from the class vme.

*****************************************/

// Standard C header files
extern "C" {
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>
#include <sys/mman.h>
#include <errno.h>
}

// C++ header files
#include <iostream>

#define V775_SETBITS(OFF,BITS){ \
unsigned int val; \
read32phys(OFF,&val); \
val |= BITS; \
write32phys(OFF,val); \
}

#define V775_RESETBITS(OFF,BITS){ \
unsigned int val; \
read32phys(OFF,&val); \
val &= (~(BITS)); \
write32phys(OFF,val); \
}

#define V775_GETBITS(OFF,BITS,SHIFT){ \
unsigned int val; \
read32phys(OFF,&val); \
return ((val&BITS)>>SHIFT); \
}

using namespace std;

/*****************************************/
// The v775 class 
/*****************************************/
class v775 : public vme {

 public:

  // Constructor
  v775(unsigned int base, const char *dev);    
  ~v775();

  uint16_t geoAddr();
  void geoAddr(uint16_t adr);
  uint16_t mcst_cbltAddr();
  void mcst_cbltAddr(uint16_t adr);
  uint16_t bsetReg1();
  void bsetReg1(uint16_t mask);
  uint16_t bclearReg1();
  void bclearReg1(uint16_t mask);
  uint16_t irqlReg();
  void irqlReg(uint16_t lev);
  uint16_t irqlVec();
  void irqlVec(uint16_t vec);
  uint16_t stReg1();
  uint16_t ctrlReg1();
  void ctrlReg1(uint16_t sets);
  uint16_t hiAddr();
  void hiAddr(uint16_t hiad);
  uint16_t loAddr();
  void loAddr(uint16_t load);
  void sshotReset();
  uint16_t mcst_cbltCtrl();
  void mcst_cbltCtrl(uint16_t sets);
  uint16_t evTrig();
  void evTrig(uint16_t nev);
  uint16_t stReg2();
  uint16_t evcLo();
  uint16_t evcHi();
  void evIncr();
  void ofsIncr();
  uint16_t fastClrW();
  void fastClrW(uint16_t tw);
  uint16_t bsetReg2();
  void bsetReg2(uint16_t mask);
  void bclearReg2(uint16_t mask);
  void wmemTest(uint16_t wadr);
  void wmemHi(uint16_t whi);
  void wmemLo(uint16_t wlo);
  uint16_t csel();
  void csel(uint16_t cnr);
  void testEvent(void * evtp);
  void evCntReset();
  uint16_t fullScale();
  void fullScale(uint16_t fsr);
  void rmemTest(uint16_t radr);
  void swComm();
  uint16_t slideConst();
  void slideConst(uint16_t sld);
  uint16_t aadReg();
  uint16_t badReg();
  uint16_t thresMem(uint16_t chan);
  void thresMem(uint16_t chan, uint16_t thr);
  uint16_t romMem(uint16_t chan);
  void romPrint();

  // Crap
  void print();                                 // Simple dump function

  inline unsigned int id();                     // Module ID
 
  //Control register
  void testCycle();      //Execute test cycle
  void enableEvenChTest();   //Enable test for even channels
  void disableEvenChTest();   //disable test for even channels
  void enableOddChTest();   //Enable test for odd channels
  void disableOddChTest();   //disable test for odd channels
  void setTestNHits(unsigned int hits);      //Set number of hists during test
  void setTestHitDuration(unsigned int time); //Set duration of test hits
  void setCommStartTimeout(unsigned int time);  //Set common start timeout
  void enableAuxCommonHit();                   //??????
  void disableAuxCommonHit();                   //??????
  void enableFallingEdge();     //Enable falling edge registration
  void disableFallingEdge();     //disable falling edge registration
  void enableRisingEdge();     //Enable rising edge registration
  void disableRisingEdge();     //disable rising edge registration
  void setTriggerPulse();   //Each hit
  void setTriggerLatch();   //Latch first hit
  void setCommStart();     //Common start
  void setCommStop();      //Common stop
  void setFastCLWindow(unsigned int time); //set fast clear window
  void enableFastClear();    //enable fast clear
  void disableFastClear();    //disable fast clear
  void enableAcq();        //enable data acquisition
  void disableAcq();       //disable data acquisition
  unsigned int isAcqEnabled();      //acquisition status
  unsigned int roip();          //read-out in progress
  void clear();         // clear
  unsigned int evtNum();    //return number of events
  unsigned int isBufferFull();  //return bufer full bit
  unsigned int getCSR0();

  unsigned int readSingleEvent(unsigned int *buf);  //read data
  unsigned int readData(unsigned int *buf);  //read data

 protected:

 private:
   vme * outputbuffer;
};

/*****************************************/
// Generic Commands
/*****************************************/


inline unsigned int v775::id() {return ba | ID_V775;}


/*****************************************/
// Constructor
/*****************************************/
v775::v775(unsigned int base, const char *dev):vme(base, 0x10000, dev)
  {
   std::string s(dev);
   uint32_t l=s.length();
   if (l>3) s.replace(l-3, 3, "d32");
   outputbuffer = new vme (base, 0x1000, s.c_str());
   std::cout << " v775::v775 done \n";
  }

v775::~v775()
  {
   delete outputbuffer;
   std::cout << " v775::~v775 done \n";
  }

/*****************************************/
void v775::print() 
/*****************************************/
{
  cout << "*************************************" << endl;  
  cout << "CAEN TDC V775 Module / base " << ba << ", mmap " << &vbuf << ", length " << length << endl;
  cout << "*************************************" << endl;
  return;
}

inline uint16_t v775::geoAddr()
  {
   uint16_t i;
   read16phys(0x1002,&i);
   return i;
  }
inline void v775::geoAddr(uint16_t adr)
  {
   write16phys(0x1002,adr);
  }
inline uint16_t v775::mcst_cbltAddr()
  {
   uint16_t i;
   read16phys(0x1004,&i);
   return i;
  }
inline void v775::mcst_cbltAddr(uint16_t adr)
  {
   write16phys(0x1004,adr);
  }
inline uint16_t v775::bsetReg1()
  {
   uint16_t i;
   read16phys(0x1006,&i);
   return i;
  }
inline void v775::bsetReg1(uint16_t mask)
  {
   write16phys(0x1006,mask);
  }
inline uint16_t v775::bclearReg1()
  {
   uint16_t i;
   read16phys(0x1008,&i);
   return i;
  }
inline void v775::bclearReg1(uint16_t mask)
  {
   write16phys(0x1008,mask);
  }
inline uint16_t v775::irqlReg()
  {
   uint16_t i;
   read16phys(0x100a,&i);
   return i;
  }
inline void v775::irqlReg(uint16_t lev)
  {
   write16phys(0x100a,lev);
  }
inline uint16_t v775::irqlVec()
  {
   uint16_t i;
   read16phys(0x100c,&i);
   return i;
  }
inline void v775::irqlVec(uint16_t vec)
  {
   write16phys(0x100c,vec);
  }
inline uint16_t v775::stReg1()
  {
   uint16_t i;
   read16phys(0x100e,&i);
   return i;
  }
inline uint16_t v775::ctrlReg1()
  {
   uint16_t i;
   read16phys(0x1010,&i);
   return i;
  }
inline void v775::ctrlReg1(uint16_t sets)
  {
   write16phys(0x1010,sets);
  }
inline uint16_t v775::hiAddr()
  {
   uint16_t i;
   read16phys(0x1012,&i);
   return i;
  }
inline void v775::hiAddr(uint16_t hiad)
  {
   write16phys(0x1012,hiad);
  }
inline uint16_t v775::loAddr()
  {
   uint16_t i;
   read16phys(0x1014,&i);
   return i;
  }
inline void v775::loAddr(uint16_t load)
  {
   write16phys(0x1014,load);
  }
inline void v775::sshotReset()
  {
   write16phys(0x1016,0);
  }
inline uint16_t v775::mcst_cbltCtrl()
  {
   uint16_t i;
   read16phys(0x101a,&i);
   return i;
  }
inline void v775::mcst_cbltCtrl(uint16_t sets)
  {
   write16phys(0x101a,sets);
  }
inline uint16_t v775::evTrig()
  {
   uint16_t i;
   read16phys(0x1020,&i);
   return i;
  }
inline void v775::evTrig(uint16_t nev)
  {
   write16phys(0x1020,nev);
  }
inline uint16_t v775::stReg2()
  {
   uint16_t i;
   read16phys(0x1022,&i);
   return i;
  }
inline uint16_t v775::evcLo()
  {
   uint16_t i;
   read16phys(0x1024,&i);
   return i;
  }
inline uint16_t v775::evcHi()
  {
   uint16_t i;
   read16phys(0x1026,&i);
   return i;
  }
inline void v775::evIncr()
  {
   write16phys(0x1028,0);
  }
inline void v775::ofsIncr()
  {
   write16phys(0x102a,0);
  }
inline uint16_t v775::fastClrW()
  {
   uint16_t i;
   read16phys(0x102e,&i);
   return i;
  }
inline void v775::fastClrW(uint16_t tw)
  {
   write16phys(0x102e,tw);
  }
inline uint16_t v775::bsetReg2()
  {
   uint16_t i;
   read16phys(0x1032,&i);
   return i;
  }
inline void v775::bsetReg2(uint16_t mask)
  {
   write16phys(0x1032,mask);
  }
inline void v775::bclearReg2(uint16_t mask)
  {
   write16phys(0x1034,mask);
  }
inline void v775::wmemTest(uint16_t wadr)
  {
   write16phys(0x1036,wadr);
  }
inline void v775::wmemHi(uint16_t whi)
  {
   write16phys(0x1038,whi);
  }
inline void v775::wmemLo(uint16_t wlo)
  {
   write16phys(0x103a,wlo);
  }
inline uint16_t v775::csel()
  {
   uint16_t i;
   read16phys(0x103c,&i);
   return i;
  }
inline void v775::csel(uint16_t cnr)
  {
   write16phys(0x103c,cnr);
  }
inline void v775::testEvent(void * evtp)
  {
   uint16_t * u16p = static_cast<uint16_t *>(evtp);
   for (int i=32; i; i--) write16phys(0x103e,*u16p++);
  }
inline void v775::evCntReset()
  {
   write16phys(0x1040,0);
  }
inline uint16_t v775::fullScale()
  {
   uint16_t i;
   read16phys(0x1060,&i);
   return i;
  }
inline void v775::fullScale(uint16_t fsr)
  {
   write16phys(0x1060,fsr);
  }
inline void v775::rmemTest(uint16_t radr)
  {
   write16phys(0x1064,radr);
  }
inline void v775::swComm()
  {
   write16phys(0x1068,0);
  }
inline uint16_t v775::slideConst()
  {
   uint16_t i;
   read16phys(0x106a,&i);
   return i;
  }
inline void v775::slideConst(uint16_t sld)
  {
   write16phys(0x106a,sld);
  }
inline uint16_t v775::aadReg()
  {
   uint16_t i;
   read16phys(0x1070,&i);
   return i;
  }
inline uint16_t v775::badReg()
  {
   uint16_t i;
   read16phys(0x1072,&i);
   return i;
  }
inline uint16_t v775::thresMem(uint16_t chan)
  {
   uint16_t i;
   uint addr = 0x1080 + 2*chan;
   read16phys(addr,&i);
   return i;
  }
inline void v775::thresMem(uint16_t chan, uint16_t thr)
  {
   uint addr = 0x1080 + 2*chan;
   write16phys(addr,thr);
  }
inline uint16_t v775::romMem(uint16_t adr)
  {
   uint16_t i;
   uint addr = 0x8000 + adr;
   read16phys(addr,&i);
   return i;
  }
void v775::romPrint()
  {
   std::cout << std::hex;
   cout << "*************************************" << endl;  
   cout << "     oui msb     " << romMem(0x0026) << endl;
   cout << "     oui         " << romMem(0x002a) << endl;
   cout << "     oui lsb     " << romMem(0x002e) << endl;
   cout << "     version     " << romMem(0x0032) << endl;
   cout << "     id msb      " << romMem(0x0036) << endl;
   cout << "     id          " << romMem(0x003a) << endl;
   cout << "     id lsb      " << romMem(0x003e) << endl;
   cout << "     revision    " << romMem(0x004e) << endl;
   cout << "     serial msb  " << romMem(0x0f02) << endl;
   cout << "     serial lsb  " << romMem(0x0f06) << endl;
   cout << "*************************************" << endl;  
   std::cout << std::dec;
  }
  
  
/*****************************************/
// V775 Programming Functions
/*****************************************/

#define V775_CSR0 0

inline unsigned int v775::getCSR0(){
  V775_GETBITS(V775_CSR0,0xffffffff,0);
}

inline void v775::testCycle(){
  V775_SETBITS(V775_CSR0,0x0);
}

inline void v775::enableEvenChTest(){
  V775_SETBITS(V775_CSR0,0x4);
}

inline void v775::disableEvenChTest(){
  V775_RESETBITS(V775_CSR0,0x4);
}

inline void v775::enableOddChTest(){
  V775_SETBITS(V775_CSR0,0x8);
}

inline void v775::disableOddChTest(){
  V775_RESETBITS(V775_CSR0,0x8);
}

inline void v775::setTestNHits(unsigned int hits){
  unsigned int val;
  volatile unsigned int vol;
  read32phys(V775_CSR0,&val);
  vol=val&(~(0x30));
  val=vol|((hits&0x3)<<4);
  write32phys(V775_CSR0,val);
}

inline void v775::setTestHitDuration(unsigned int time){
  unsigned int val;
  volatile unsigned int vol;
  read32phys(V775_CSR0,&val);
  vol=val&(~(0xC0));
  val=vol|((time&0x3)<<6);
  write32phys(V775_CSR0,val);
}

inline void v775::setCommStartTimeout(unsigned int time){
  unsigned int val;
  volatile unsigned int vol;
  read32phys(V775_CSR0,&val);
  vol=val&(~(0x700));
  val=vol|((time&0x7)<<8);
  write32phys(V775_CSR0,val);
}

inline void v775::enableAuxCommonHit(){
  V775_SETBITS(V775_CSR0,0x800);
}

inline void v775::disableAuxCommonHit(){
  V775_RESETBITS(V775_CSR0,0x800);
}

inline void v775::enableFallingEdge(){
  V775_RESETBITS(V775_CSR0,0x1000);
}

inline void v775::disableFallingEdge(){
  V775_SETBITS(V775_CSR0,0x1000);
}
 
inline void v775::enableRisingEdge(){
  V775_RESETBITS(V775_CSR0,0x2000);
}

inline void v775::disableRisingEdge(){
  V775_SETBITS(V775_CSR0,0x2000);
}

inline void v775::setTriggerPulse(){
  V775_SETBITS(V775_CSR0,0x4000);
}
 
inline void v775::setTriggerLatch(){
  V775_RESETBITS(V775_CSR0,0x4000);
}
 
inline void v775::setCommStart(){
  V775_SETBITS(V775_CSR0,0x8000);
}
 
inline void v775::setCommStop(){
  V775_RESETBITS(V775_CSR0,0x8000);
}

inline void v775::setFastCLWindow(unsigned int time){
  unsigned int val;
  volatile unsigned int vol;
  read32phys(V775_CSR0,&val);
  vol=val&(~(0x70000));
  val=vol|((time&0x7)<<16);
  write32phys(V775_CSR0,val);
}
 
inline void v775::enableFastClear(){
  V775_SETBITS(V775_CSR0,0x80000);
}
 
inline void v775::disableFastClear(){
  V775_RESETBITS(V775_CSR0,0x80000);
}

inline void v775::enableAcq(){
  V775_RESETBITS(V775_CSR0,0x100000);
}

inline void v775::disableAcq(){
  V775_SETBITS(V775_CSR0,0x100000);
}

inline unsigned int v775::isAcqEnabled(){
  V775_GETBITS(V775_CSR0,0x200000,21);
}

inline unsigned int v775::roip(){
  V775_GETBITS(V775_CSR0,0x400000,22);
}

inline void v775::clear(){
  V775_SETBITS(V775_CSR0,0x800000);
}
 
inline unsigned int v775::evtNum(){
  V775_GETBITS(V775_CSR0,0x1F000000,24);
}

inline unsigned int v775::isBufferFull(){
  V775_GETBITS(V775_CSR0,0x20000000,29);
}
  
unsigned int v775::readSingleEvent(unsigned int *buf){
  unsigned int val, count=0;

  *buf++ = 0xDEAAED00;
  count=0;
  do {
    // read32phys(V775_EVENT(0)+0x8*count,&val);
    read32phys(4*count,&val);
    *buf++ = val;
    count ++;
  } while (val&0x800000);

  return count+1;
}

unsigned int v775::readData(unsigned int *buf){
  unsigned int i,size=0;
  unsigned int evts=evtNum();
  unsigned int val;
  unsigned int count;

  if(evts==0)
    return 0;


  for(i=0;i<evts;i++){
    *buf++ = 0xDEAAED00+i;
    size++;
    count=0;
    do{
      // read32phys(V775_EVENT(i)+0x8*count,&val);   // BOB ??? come 8 ?
      *buf++ = 0;
      size++;
      count++;
    }
    while(0x800000);
  }
  
  return size;
}

